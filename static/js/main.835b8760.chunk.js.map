{"version":3,"sources":["Components/Spinner.js","Components/InnerTemperatures.js","Helpers/Helpers.js","Components/WeatherCards.js","Hooks/useWindowResize.js","App.js","index.js"],"names":["Spinner","id","CircularProgress","InnerTemperatures","props","loading","card","idx","icon","unit","Grid","item","xs","Skeleton","className","height","width","hours","alt","src","Math","round","temperatures","mobileCheck","a","check","navigator","userAgent","vendor","window","opera","test","substr","formatDate","date","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","WeatherCards","showChart","sm","md","Card","CardContent","sx","flexGrow","Typography","variant","component","reduce","b","gutterBottom","container","icons","map","marginTop","result","dt_txt","Button","onClick","fullWidth","dt","useWindowResize","useState","innerHeight","innerWidth","windowSize","setWindowSize","useEffect","handleResize","addEventListener","removeEventListener","App","cityName","setCityName","setUnit","results","setResults","setLoading","showSnackbar","setShowSnackbar","snackbarSeverity","setSnackbarSeverity","snackbarMessage","setSnackbarMessage","chartData","setChartData","sliderIndex","setSliderIndex","pageSize","setPageSize","resultsGroupedByDay","groupResultsByDay","secondaryIndex","forEach","filter","e","split","push","weather","main","feels_like","refresh","fetch","then","response","json","data","parseInt","cod","message","city","name","list","catch","error","CssBaseline","Snackbar","open","autoHideDuration","severity","onClose","Alert","Container","maxWidth","Box","mt","mb","spacing","IconButton","color","FormControl","RadioGroup","row","value","onChange","event","target","FormControlLabel","control","Radio","label","direction","alignItems","justify","prevState","fontSize","slice","tempArray","i","hour","temperature","setTimeout","scrollTo","document","body","scrollHeight","random","pt","ResponsiveContainer","BarChart","margin","top","right","bottom","left","CartesianGrid","strokeDasharray","XAxis","dataKey","YAxis","Tooltip","Legend","wrapperStyle","Bar","type","fill","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.835b8760.chunk.js","sourcesContent":["import {CircularProgress} from \"@mui/material\";\n\nfunction Spinner(){\n    return(\n        <div id=\"spinner-glass\">\n            <CircularProgress />\n        </div>\n    )\n}\n\nexport default Spinner;","import {Grid, Skeleton} from \"@mui/material\";\nfunction InnerTemperatures(props){\n    const {\n        loading,\n        card,\n        idx,\n        icon,\n        unit\n    } = props;\n    return(\n        <>\n        {\n            loading ?\n                <Grid item xs={3} >\n                    <Skeleton className=\"temperature-skeleton\" height={80} width=\"90%\"/>\n                </Grid> :\n                <Grid item xs={3} >\n                    <div className=\"hourly-temperature-container\">\n                        <div className=\"hours text-center\">{card.hours[idx]}</div>\n                        <img alt={icon} className=\"small-weather-image\" src={`http://openweathermap.org/img/wn/${icon}@2x.png`}/>\n                        <div className=\"hourly-temperature text-center\">{`${Math.round(card.temperatures[idx])} ${unit === \"metric\" ? \"℃\" : \"℉\"}`} </div>\n                    </div>\n                </Grid>\n        }\n        </>\n    )\n}\n\nexport default InnerTemperatures;","/* eslint-disable */\nfunction mobileCheck() {\n    let check = false;\n    (function(a){if(/(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(a)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(a.substr(0,4))) check = true;})(navigator.userAgent||navigator.vendor||window.opera);\n    return check;\n};\n\nfunction formatDate(date) {\n    let d = new Date(date),\n        month = '' + (d.getMonth() + 1),\n        day = '' + d.getDate(),\n        year = d.getFullYear();\n\n    if (month.length < 2)\n        month = '0' + month;\n    if (day.length < 2)\n        day = '0' + day;\n\n    return [day, month, year].join('/');\n}\n\nfunction getPosition() {\n    return new Promise((res, rej) => {\n        navigator.geolocation.getCurrentPosition(res, rej);\n    });\n}\n\nexport {mobileCheck, formatDate, getPosition};","import {Button, Card, CardContent, Grid, Skeleton, Typography} from \"@mui/material\";\nimport InnerTemperatures from \"./InnerTemperatures\";\nimport {formatDate} from \"../Helpers/Helpers\";\n\nfunction WeatherCards(props){\n    const {\n        card,\n        loading,\n        unit,\n        showChart\n    } = props;\n\n    return(\n        <Grid item key={card.dt} xs={12} sm={6} md={4}>\n            <Card>\n                <CardContent sx={{ flexGrow: 1 }}>\n                    {\n                        loading ? <Skeleton height={100} /> :\n                            <Typography className=\"weather-average\" variant=\"h4\" component=\"div\">\n                                {\n                                    `${Math.round(card.temperatures.reduce((a, b) => a + b) / card.temperatures.length)} ${unit === \"metric\" ? \"℃\" : \"℉\"} `\n                                }\n                                <span>(average)</span>\n                            </Typography>\n                    }\n\n                    <Typography component=\"div\" gutterBottom>\n                        <Grid container>\n                            {\n                                card.icons.map((icon, idx) => {\n                                    return (\n                                        <InnerTemperatures\n                                            key={idx}\n                                            loading={loading}\n                                            card={card}\n                                            idx={idx}\n                                            icon={icon}\n                                            unit={unit}\n                                        />\n                                    )\n                                })\n                            }\n                        </Grid>\n                    </Typography>\n\n                    {\n                        loading ? <Skeleton height={40} /> :\n                            <Typography gutterBottom variant=\"h5\" component=\"div\" marginTop className=\"text-center\">\n                                {formatDate(card.result.dt_txt)}\n                            </Typography>\n                    }\n                    {\n                        loading ? <Skeleton height={40} /> :\n                            <Button onClick={()=> showChart(card)} fullWidth variant=\"outlined\">Select Me!</Button>\n                    }\n\n                </CardContent>\n            </Card>\n        </Grid>\n    )\n\n}\nexport default WeatherCards;","// Create a custom hook to listen windowResize event\nimport {useState,useEffect} from \"react\";\n\nfunction useWindowResize(){\n    const [windowSize, setWindowSize] = useState([window.innerHeight, window.innerWidth]);\n    useEffect(() => {\n        function handleResize(){\n            setWindowSize([window.innerHeight, window.innerWidth]);\n        }\n        window.addEventListener(\"resize\", handleResize);\n        return() => {\n            window.removeEventListener(\"resize\", handleResize);\n        }\n    }, [])\n    return windowSize;\n}\n\nexport default useWindowResize;","import './App.css';\nimport {useState, useEffect} from \"react\";\nimport Spinner from \"./Components/Spinner\";\nimport WeatherCards from \"./Components/WeatherCards\";\nimport {mobileCheck, getPosition} from \"./Helpers/Helpers\";\nimport useWindowResize from \"./Hooks/useWindowResize\";\nimport {\n    Alert,\n    Snackbar,\n    Container,\n    Grid,\n    Typography,\n    CssBaseline,\n    IconButton,\n    FormControl,\n    FormControlLabel,\n    RadioGroup,\n    Radio,\n    Box,\n    Skeleton\n} from \"@mui/material\";\nimport RefreshIcon from '@mui/icons-material/Refresh';\nimport ChevronRightIcon from '@mui/icons-material/ChevronRight';\nimport ChevronLeftIcon from '@mui/icons-material/ChevronLeft';\nimport { BarChart, Bar, XAxis, YAxis, CartesianGrid, Tooltip, Legend, ResponsiveContainer } from 'recharts';\n\nfunction App() {\n    const API_KEY = 'bc2c62b8d886eddba5f797af4475c75d';\n    //const API_KEY = '404dcc2f1c8087d835711166d14ca85b';\n    const [cityName, setCityName] = useState('');\n    const [unit, setUnit] = useState('metric');\n    const [results, setResults] = useState([]);\n    const [loading, setLoading] = useState(true);\n    const [showSnackbar, setShowSnackbar] = useState(false);\n    const [snackbarSeverity, setSnackbarSeverity] = useState('success');\n    const [snackbarMessage, setSnackbarMessage] = useState('');\n    const [chartData, setChartData] = useState([]);\n    const [sliderIndex, setSliderIndex] = useState(0);\n    const [pageSize, setPageSize] = useState(mobileCheck() ? 1 : 3); // check if the device is mobile or not onload\n    const resultsGroupedByDay = [];\n    const [height, width] = useWindowResize();\n\n    function groupResultsByDay(results){\n        let secondaryIndex = 0;\n        results.forEach((result) => {\n            if (resultsGroupedByDay.filter(e => e.date.split(\" \")[0] === result.dt_txt.split(\" \")[0]).length > 0) {\n                resultsGroupedByDay[secondaryIndex - 1].icons.push(result.weather[0].icon);\n                resultsGroupedByDay[secondaryIndex - 1].temperatures.push(result.main.feels_like);\n                resultsGroupedByDay[secondaryIndex - 1].hours.push(result.dt_txt.split(\" \")[1].split(\":\")[0]);\n            }\n            else{\n                resultsGroupedByDay.push({\n                    date: result.dt_txt.split(\" \")[0],\n                    icons: [result.weather[0].icon],\n                    hours: [result.dt_txt.split(\" \")[1].split(\":\")[0]],\n                    temperatures: [result.main.feels_like],\n                    result: result\n                })\n                secondaryIndex++;\n            }\n        })\n        setResults(resultsGroupedByDay);\n    }\n\n    useEffect(() => {\n        // just to handle browser resize\n        setSliderIndex(0);\n        setPageSize(mobileCheck() ? 1 : 3);\n    }, [height, width])\n\n    const refresh = async () => {\n        try{\n            //let position = await getPosition();\n            //fetch(`https://api.openweathermap.org/data/2.5/forecast?lat=${position.coords.latitude}&lon=${position.coords.longitude}&appid=${API_KEY}&units=${unit}`)\n            // You can uncomment upper two lines of code and comment the fetch line below to get user geolocation for more precise results\n                fetch(`https://api.openweathermap.org/data/2.5/forecast?q=Munich,de&appid=${API_KEY}&units=${unit}`)\n                .then(response => response.json())\n                .then(data => {\n                    if(parseInt(data.cod) !== 200){\n                        setLoading(false);\n                        setSnackbarMessage(data.message);\n                        setSnackbarSeverity(\"error\");\n                        setShowSnackbar(true);\n                    }\n                    else{\n                        setCityName(data.city.name);\n                        setLoading(false);\n                        setSnackbarMessage('Data successfully fetched!');\n                        setSnackbarSeverity(\"success\");\n                        setShowSnackbar(true);\n                        setChartData([]);\n                        groupResultsByDay(data.list);\n                    }\n                })\n                .catch((error) => {\n                    setSnackbarMessage(error);\n                    setSnackbarSeverity(\"error\");\n                    setChartData([]);\n                    setShowSnackbar(true);\n                });\n        }\n        catch (error){\n            setSnackbarMessage(error.message);\n            setSnackbarSeverity(\"error\");\n            setChartData([]);\n            setShowSnackbar(true);\n        }\n\n    }\n    useEffect(refresh, [unit])\n\n    return (\n      <>\n          {\n              loading ? <Spinner /> : <></>\n          }\n\n          <CssBaseline />\n          <Snackbar\n              open={showSnackbar}\n              autoHideDuration={5000}\n              message={snackbarMessage}\n              severity={snackbarSeverity}\n              onClose={() => setShowSnackbar(false)}\n          >\n              <Alert severity={snackbarSeverity} sx={{ width: '100%' }}>\n                  {snackbarMessage}\n              </Alert>\n          </Snackbar>\n\n          <Container maxWidth=\"lg\">\n              <Box mt={2} mb={2}>\n                  {\n                      loading ? <Skeleton /> :\n                          <Grid id=\"header\" container spacing={4}>\n                              <Grid item xs={12}>\n                                  <Typography variant=\"h5\">\n                                      Displaying results for {cityName}\n                                      <IconButton onClick={() => {\n                                          setLoading(true)\n                                          refresh()\n                                      }} color=\"primary\" aria-label=\"refresh\">\n                                          <RefreshIcon />\n                                      </IconButton>\n                                  </Typography>\n                                  <FormControl component=\"fieldset\">\n                                      <RadioGroup row\n                                                  aria-label=\"unit\"\n                                                  name=\"row-radio-buttons-group\"\n                                                  value={unit}\n                                                  onChange={(event) => {\n                                                      setLoading(true);\n                                                      setChartData([]);\n                                                      setUnit(event.target.value);\n                                                  }}\n                                      >\n                                          <FormControlLabel value=\"metric\" control={<Radio />} label=\"Celsius\" />\n                                          <FormControlLabel value=\"imperial\" control={<Radio />} label=\"Fahrenheit\" />\n                                      </RadioGroup>\n                                  </FormControl>\n                              </Grid>\n                          </Grid>\n                  }\n              </Box>\n\n              <Grid\n                  container\n                  direction=\"row\"\n                  alignItems=\"center\"\n                  justify=\"center\"\n                  spacing={4}>\n\n                  {\n                      // check if slider is at the beginning position, if so, do not render the previous arrow\n                      sliderIndex === 0 ? <></> :\n                          <div id=\"decrement\" className=\"slider-buttons\" onClick={() => {\n                              setChartData([]);\n                              setSliderIndex(prevState => prevState -1)\n                          }}><ChevronLeftIcon fontSize=\"large\"/></div>\n                  }\n\n                  {results.slice(pageSize * sliderIndex,(pageSize * sliderIndex) + pageSize).map((card) =>\n                      // split the results array according to page size and slider index\n                      <WeatherCards\n                          key={Math.random()}\n                          card={card}\n                          loading={loading}\n                          unit={unit}\n                          showChart={(card) => {\n                              let tempArray = [];\n                              for(let i=0; i<card.temperatures.length; i++){\n                                  tempArray.push({\n                                      hour: `${card.hours[i]}:00`,\n                                      temperature: Math.round(card.temperatures[i])\n                                  })\n                              }\n                              setChartData(tempArray);\n                              setTimeout(function (){\n                                  window.scrollTo(0,document.body.scrollHeight);\n                              }, 100)\n                          }}\n                      />)}\n\n\n                  {\n                      // check if slider will have elements on next page, if it doesn't have anything to show, do not render the next arrow\n                      (sliderIndex + 1) * pageSize >= results.length ? <></> :\n                          <div id=\"increment\" className=\"slider-buttons\"  onClick={() => {\n                              setChartData([]);\n                              setSliderIndex(prevState => prevState + 1);\n                          }}><ChevronRightIcon  fontSize=\"large\"/></div>\n                  }\n              </Grid>\n              {\n                  chartData.length === 0 ? <></> :\n                      <Box mt={5} pt={3}>\n                          <Grid container spacing={4}>\n                              <ResponsiveContainer width=\"100%\" height={400}>\n                                  <BarChart margin={{ top: 30, right: 0, bottom: 5, left: -20}}  data={chartData}>\n                                      <CartesianGrid strokeDasharray=\"3 3\" />\n                                      <XAxis dataKey=\"hour\" />\n                                      <YAxis dataKey=\"temperature\"/>\n                                      <Tooltip />\n                                      <Legend wrapperStyle={{top: 0, left: 25}}/>\n                                      <Bar name={`Temperature (${unit === \"metric\" ? \"℃\" : \"℉\"})`} type=\"monotone\" dataKey=\"temperature\" fill=\"#1976d2\" />\n                                  </BarChart>\n                              </ResponsiveContainer>\n                          </Grid>\n                      </Box>\n              }\n          </Container>\n      </>\n  );\n}\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n          <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}